{"version":3,"sources":["styles.ts","utils.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Content","styled","div","Section","Right","DEPLOY_ADDRESS","App","useState","mintStatus","setMintStatus","testTokenName","setTestTokenName","testTokenSymbol","setTestTokenSymbol","swapRate","setSwapRate","currentTestBalance","setCurrentTestBalance","currentEtherBalance","setCurrentEtherBalance","buyAmount","setBuyAmount","receiveAddress","setReceiveAddress","receiveAmount","setReceiveAmount","requestAccount","a","window","ethereum","request","method","Error","onBuyTokens","alert","account","provider","ethers","providers","Web3Provider","contract","Contract","TestTokenArtifacts","abi","swap","success","console","log","onSendTokens","useEffect","getBalance","balance","Number","utils","formatEther","name","symbol","balanceOf","fetchData","Typography","Button","variant","disableElevation","onClick","TextField","id","type","label","value","onChange","e","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e2bda605.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const Content = styled.div`\n  max-width: 400px;\n  margin: 50px auto;\n`;\n\nexport const Section = styled.div`\n  display: flex;\n  align-items: baseline;\n  justify-content: space-between;\n  padding: 10px 0;\n`;\n\nexport const Right = styled.div`\n  text-align: right;\n  padding: 10px 0;\n`;","// export const DEPLOY_ADDRESS = \"0x5398f3dB118E6268BD42135e167BF9ad045D4752\";\nexport const DEPLOY_ADDRESS = \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\";","import React, { useEffect, useState } from 'react';\nimport { Button, Typography, TextField } from \"@mui/material\";\nimport { ethers } from \"ethers\";\nimport TestTokenArtifacts from \"artifacts/contracts/TestToken.sol/TestToken.json\";\nimport { Content, Section, Right } from './styles';\nimport { DEPLOY_ADDRESS } from \"utils\";\n\ndeclare global {\n  interface Window {\n    ethereum: ethers.providers.ExternalProvider;\n  }\n}\nfunction App() {\n  const [mintStatus, setMintStatus] = useState(false); // Status to set sales permission\n  const [testTokenName, setTestTokenName] = useState(\"\"); // Test Token's Name\n  const [testTokenSymbol, setTestTokenSymbol] = useState(\"\"); // Test Token's Symbol\n  const [swapRate, setSwapRate] = useState(0);\n  const [currentTestBalance, setCurrentTestBalance] = useState(0); // Current Test Token's Balance\n  const [currentEtherBalance, setCurrentEtherBalance] = useState(0); // Current Ether's Balance\n  const [buyAmount, setBuyAmount] = useState(0); // Amount of tokens to buy\n  const [receiveAddress, setReceiveAddress] = useState(\"0x8626f6940E2eb28930eFb4CeF49B2d1F2C9C1199\"); // Address to send tokens\n  const [receiveAmount, setReceiveAmount] = useState(0); // Amount of tokens to send\n\n  // function for connect to Metamask\n  const requestAccount = async () => {\n    if (window.ethereum?.request)\n      return window.ethereum.request({ method: \"eth_requestAccounts\" });\n\n    throw new Error(\n      \"Missing install Metamask. Please access https://metamask.io/ to install extension on your browser\"\n    );\n  }\n\n  // function for change the mint permission\n  const onChangeMintStatus = () => {\n    setMintStatus(!mintStatus);\n  };\n\n  // function for buy tokens\n  const onBuyTokens = async () => {\n    let ether_amount = buyAmount / swapRate;\n    if (ether_amount >= currentEtherBalance) {\n      alert(\"Not enough Ether in your wallet!\");\n    } else {\n      const [account] = await requestAccount();\n      if (typeof window.ethereum !== \"undefined\") {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const contract = new ethers.Contract(DEPLOY_ADDRESS, TestTokenArtifacts.abi, provider);\n        try {\n          const success: boolean = await contract.swap(account, buyAmount);\n          console.log(success);\n        } catch (err) {\n          console.log(`Error: ${err}`);\n        }\n      }\n    }\n  };\n\n  // function for send tokens\n  const onSendTokens = async () => {\n    let ether_amount = buyAmount;\n    if (ether_amount >= currentEtherBalance) {\n      alert(\"Not enough Ether in your wallet!\");\n    } else {\n      const [account] = await requestAccount();\n      if (typeof window.ethereum !== \"undefined\") {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const contract = new ethers.Contract(DEPLOY_ADDRESS, TestTokenArtifacts.abi, provider);\n        try {\n          const success: boolean = await contract.swap(account, buyAmount);\n          console.log(success);\n        } catch (err) {\n          console.log(`Error: ${err}`);\n        }\n      }\n    }\n  };\n\n  // function for get current status\n  useEffect(() => {\n    const fetchData = async () => {\n      const [account] = await requestAccount();\n      if (typeof window.ethereum !== \"undefined\") {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const balance = await provider.getBalance(account);\n        setCurrentEtherBalance(Number(ethers.utils.formatEther(balance)));\n        const contract = new ethers.Contract(DEPLOY_ADDRESS, TestTokenArtifacts.abi, provider);\n        try {\n          setTestTokenName(await contract.name());\n          setTestTokenSymbol(await contract.symbol());\n          setCurrentTestBalance(Number(await contract.balanceOf(account)));\n          setSwapRate(Number(await contract.swapRate()));\n        } catch (err) {\n          console.log(`Error: ${err}`);\n        }\n      }\n    }\n\n    fetchData();\n  }, []);\n\n  return (\n    <Content>\n      <Section>\n        <Typography>Sales Permission: {mintStatus ? \"True\" : \"False\"}</Typography>\n      </Section>\n      <Right>\n        <Button\n          variant=\"contained\"\n          disableElevation\n          onClick={onChangeMintStatus}\n        >\n          {mintStatus ? \"Stop Sale\" : \"Start Sale\"}\n        </Button>\n      </Right>\n      \n      <Section>\n        <Typography>Current {testTokenName}'s Balance:</Typography>\n        <Typography>{currentTestBalance} {testTokenSymbol}</Typography>\n      </Section>\n\n      <Section>\n        <Typography>Current Ether's Balance:</Typography>\n        <Typography>{currentEtherBalance} ETH</Typography>\n      </Section>\n\n      <Section>\n        <Typography>Buy Tokens: </Typography>\n        <TextField\n          id=\"standard-basic\"\n          type=\"number\"\n          label=\"Token's Amount\"\n          variant=\"standard\"\n          value={buyAmount}\n          onChange={(e) => setBuyAmount(+e.target.value)}\n        />\n      </Section>\n      <Right>\n        <Button\n          variant=\"contained\"\n          disableElevation\n          onClick={onBuyTokens}\n        >\n          Buy Tokens ({Number(buyAmount / swapRate)} ETH)\n        </Button>\n      </Right>\n\n      <Section>\n        <Typography>Receive Address: </Typography>\n        <TextField\n          id=\"standard-basic\"\n          label=\"Receive Address\"\n          variant=\"standard\"\n          value={receiveAddress}\n          onChange={(e) => setReceiveAddress(e.target.value)}\n        />\n      </Section>\n\n      <Section>\n        <Typography>Receive Amount: </Typography>\n        <TextField\n          id=\"standard-basic\"\n          type=\"number\"\n          label=\"Receive Amount\"\n          variant=\"standard\"\n          value={receiveAmount}\n          onChange={(e) => setReceiveAmount(+e.target.value)}\n        />\n      </Section>\n      <Right>\n        <Button\n          variant=\"contained\"\n          disableElevation\n          onClick={onSendTokens}\n        >\n          Send Tokens\n        </Button>\n      </Right>\n    </Content>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}